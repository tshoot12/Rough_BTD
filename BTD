

% General stepping algorithm for psychometric functions
% Create an array of zeroes to store user input
trial_number = 10; % How many stimuli will be shown to participants and how many recordings will be done
%base_trials = 5; % Estimates beta and alpha
SOA = 0:0.025:0.1; % amount of ms range to sample from
trial_row = zeros(trial_number,6);
time_interval = 0.005;% Can be changed to suit specific experiment parameters

% Create dialog box to enter participant number in
prompt = {'Enter Participant Number:'}; % Citation: dialog box code found on: http://www.mathworks.com/help/matlab/ref/inputdlg.html?refresh=true, last access was November 26th 2015
dlg_title = 'Participant Number';
num_lines = 1;
answer = inputdlg(prompt,dlg_title,num_lines);
% Convert participant number from a character into a number
participant_number = str2double(answer{1});
% Ensure that participant number is a number and not a NaN
if isfinite(participant_number)
    participant_row = participant_number;
else
    error('Participant Number must be a number')
end

% Translate key numbers into allocated names
KbName('UnifyKeyNames');
leftKey = KbName('LeftArrow');
rightKey = KbName('RightArrow');
quitKey = KbName('ESCAPE');
enterKey = KbName('return');

%Start up PTB
Main_Screen = 0; % Citation: screen set up, text descriptions and flips found on exampleExperiment.m by Dr. David Hunter
Screen('Preference', 'SkipSyncTests',1); % So if you are using more than one monitor put to 1 to skip VBL check, if not go to zero

% Figures out screen resolution and calculates how to centre a shape
[wPtr,rect] = Screen('OpenWindow',0); % if two monitors, set to one to go on primary

% create a new response variable to store one response per stimulus
response = double(1);

for currentStimulus = 1:trial_number;
    Randomizer = randperm(length(SOA));
    SOA = SOA(Randomizer);% Randomize between two different ms time intervals
    SOA_trial = SOA(1,1); % choose first cell of vector as value
    % Store the trial and participant number into growing matrix
    trial_row(currentStimulus,1)= participant_row;
    trial_row(currentStimulus,2)= currentStimulus;
    
    % Set the default to randomly choose 1 or 2
    default = randperm(2,1);
    
    % default first stimulus, if 1 then goes to the left, if 2 then goes to
    % the right
    LED_on_fixation;
    WaitSecs(time_interval);
    % Time zero for reaction time
    secs0 = GetSecs; % Citation: calculating RT by Rachel Cooper under 'Creating experiments using Matlab and Psychtoolbox' accessed November 17th 2015, can be found on: https://www.academia.edu/2614964/Creating_experiments_using_Matlab_and_Psychtoolbox
    
    if default < 2
        LED_on_far_left;
        WaitSecs(SOA_trial); % Wait designated SOA
        LED_off_far_left;
        LED_on_far_right;
        WaitSecs(time_interval);
        LED_off_far_right;
    else
        LED_on_far_right;
        WaitSecs(SOA_trial); % Wait designated SOA
        LED_off_far_right;
        LED_on_far_left;
        WaitSecs(time_interval);
        LED_off_far_left;
    end
    LED_off_fixation; 
    % Record whether 1 or 2 was chosen into growing matrix
    trial_row(currentStimulus,3) = default;
    % Record what the stimulus onset asynchrony was chosen to be for the
    % trial
    trial_row(currentStimulus,4) = SOA_trial;
    % Wait some time so KbWait does not advance too quickly
    
    WaitSecs(time_interval); % Should I have this here?
    
    
    
    
    % Only look for key presses for the relevant keys
    RestrictKeysForKbCheck([leftKey,rightKey, quitKey]);
    
    % Wait for keypress and release, only accurate to the nearest 5ms
    KbWait;
    
    % Check what key was pressed
    [keyIsDown, secs, keyCode] = KbCheck;% Citation: Rachel Cooper, accessed November 17th 2015, see full citation above. Modified, deleted deltasecs
    
    % Wait for key to be released, extremely important
    KbReleaseWait;
    
    % Stores the user response associated with direction of stimulus, 7 =
    % left, 8 = right, otherwise quit is pressed and error comes up
    if keyCode(leftKey)
        response = 1;
    elseif keyCode(rightKey)
        response = 2;
    elseif keyCode(quitKey)
        
        Screen('CloseAll');
        error('User hit the quit key');
    end
    
    % Calculate reaction time
    RT = secs - secs0; %Citation, for RT calculation as well: Rachel Cooper, accessed November 17th 2015, see full citation above
    
    % Assign responses (left or right keypress) into growing matrix
    trial_row(currentStimulus,5) = response;
    
    % Record reaction time in matrix
    trial_row(currentStimulus,6) = RT;
    
    
end

% Debrief message after experiment is complete
debrief = 'The experiment is now over, press enter to quit back to Matlab.';

% White screen with specified text values
Screen('FillRect',wPtr,[ 255 255 255 255]); % Citation, text, restricting keys and screen: exampleExperiment.m by Dr. David Hunter
Screen('TextFont',wPtr, 'Courier New');
Screen('TextSize',wPtr, 14);
Screen('TextStyle', wPtr, 1+2);
DrawFormattedText(wPtr, debrief, 10, 20, [0 0 0 255], 40);

% Bring screen from the back to the front so the participant can see it
Screen('Flip', wPtr);

% Restrict keypresses to the enter/return key, wait for keypress
RestrictKeysForKbCheck(enterKey);
KbWait

% Close Psychtoolbox
Screen('CloseAll')
SOA_L_correct = zeros(trial_number,1);
SOA_R_correct = zeros(trial_number,1);
SOA_left = zeros(trial_number,1);
SOA_right = zeros(trial_number,1);
for x = 1:trial_number
    if trial_row(x,3) == 1 && trial_row(x,4) == 0% this needs to be by SOA as well 
        SOA_left(x,1) = trial_row(x,3);
    elseif trial_row(x,3) == 2
        SOA_right(x,1) = trial_row(x,3);
    end
    if trial_row(x,3) == 1 && trial_row(x,5) == 1
        SOA_L_correct(x,1) = trial_row(x,5);
    elseif trial_row(x,3) ==2 && trial_row(x,5) == 2; % correct trials to the right
        SOA_R_correct (x,1)= trial_row(x,5);
        
    end
    if trial_row(x,3) == 1 && trial_row(x,4) == 0 && trial_row(x,5) == 1
        SOA_L_correct_1(x,1) = trial_row(x,5);
    elseif trial_row(x,3) ==1 && trial_row(x,4) == 0.025 && trial_row(x,5) == 1% correct trials to the left for that specific SOA
        SOA_L_correct_2(x,1)= trial_row(x,5);
    elseif trial_row(x,3) == 1 && trial_row(x,4) == 0.050 && trial_row(x,5) == 1
        SOA_L_correct_3(x,1)= trial_row(x,5);
    elseif trial_row(x,3) == 1 && trial_row(x,4) == 0.075 && trial_row(x,5) == 1
        SOA_L_correct_4(x,1)= trial_row(x,5);
    elseif trial_row(x,3) == 1 && trial_row(x,4) == 0.100 && trial_row(x,5) == 1
        SOA_L_correct_5(x,1)= trial_row(x,5);
    end
end

left_probability = (sum(SOA_L_correct))/(sum(SOA_left)); % probability of clicking left if the stim appeared to the left
right_probability = (sum(SOA_R_correct))/(sum(SOA_right)); % probability of clicking right if the stim was to the right

%figure

%ax1 = subplot (2,2,[1 1]);
%scatter(SOA_L_correct,RT_L_correct)
%xlabel('Time in ms for SOA to the left')
%ylabel('RT to the left')
%ax2 = subplot(2,2,[2 1]hel);
%p = polyfit(SOA_L_correct,RT_L_correct,1);
%f = polyval(p,SOA_L_correct);
%hold on
%plot(SOA_L_correct, RT_L_correct, '--g')
%figure
%scatter(SOA_L_incorrect,RT_R_incorrect)
%xlabel('Time in ms for SOA to the left')
%ylabel('RT to the right')
%ax3= subplot(2,2,[1 2]);

%figure
%scatter(SOA_R_correct,RT_R_correct)
%xlabel('Time in ms for SOA to the right')
%ylabel('RT to the right')
%ax4 = subplot(2,2,[2 2]);

%figure
%scatter(SOA_R_incorrect,RT_L_incorrect)
%xlabel('Time in ms for SOA to the right')
%ylabel('RT to the left')


dlmwrite('BTD_Results.csv',trial_row,'delimiter', ',','-append');
