% General stepping algorithm for psychometric functions
% Create row vector of zeroes to store user input
participant_row = zeros(1,5);

% Use count to advance position in row vector to avoid rewriting data
%count = 1;
% Create dialog box to enter participant number in
prompt = {'Enter Participant Number:'}; % Citation: dialog box code found on: http://www.mathworks.com/help/matlab/ref/inputdlg.html?refresh=true, last access was November 26th 2015
dlg_title = 'Participant Number';
num_lines = 1;
answer = inputdlg(prompt,dlg_title,num_lines);
% Convert participant number from a character into a number
participant_number = str2double(answer{1});
% Ensure that participant number is a number and not a NaN
if isfinite(participant_number)
    participant_row(1) = participant_number;
else
    error('Participant Number must be a number')
end
time_interval = 10;% Can be changed to suit specific experiment parameters

% Possible have a separate script that emalgamates each participant
% together
KbName('UnifyKeyNames');
leftKey = KbName('LeftArrow');
rightKey = KbName('RightArrow');
quitKey = KbName('ESCAPE');
%% create a new responses variable ( a vector of length noImages to store
% one responce per image
response = char(1);

Main_Screen = 0; % Citation: screen set up, text descriptions and flips found on exampleExperiment.m by Dr. David Hunter
Screen('Preference', 'SkipSyncTests',0);

% Restrict keypresses to only the numbers and the Esc key
RestrictKeysForKbCheck([leftKey,rightKey, quitKey]);
% Figures out screen resolution and calculates how to centre a shape
[wPtr,rect] = Screen('OpenWindow',0);
screenWidth = rect(3);
screenHeight = rect(4);
screenCenterX = screenWidth/2;
screenCenterY = screenHeight/2;

myRectWidth = 100;
myRectHeight = 100;

myRectLeft = screenCenterX - myRectWidth/2;
myRectTop = screenCenterY - myRectHeight/2;
myRectRight = myRectLeft + myRectWidth;
myRectBottom = myRectTop + myRectHeight;
myRect = [myRectLeft, myRectTop, myRectRight, myRectBottom];




for currentStimulus = 1:20; % Can change amount of stimuli here
    default = randperm(2,1);
    participant_row(2)= currentStimulus;
    count = count + 1;
    % Turns screen black, sets location of the image
    Screen(window,'FillRect', [ 0 0 0 0]);
    rect= [ 0 0 width height];
    % default first stimulus, randomly chooses number from 1 to 2, if 1
    % then goes to the right, if 2 then goes to the left
    if default < 2
        myRect = [myRectLeft - 100, myRectTop, myRectRight - 100, myRectBottom];
    else
        myRect = [myRectLeft + 100, myRectTop, myRectRight + 100, myRectBottom];
    end
    
    Screen('FillRect',wPtr,[0 0 255],myRect)
    Screen('FillOval',wPtr,[255 0 0 ],myRect)
    Screen('Flip',wPtr);
    participant_row(3) = default;
    % Get time of stimulus onset
    
    % Make screen visible to participant, wait specified amount of seconds
    % on each face
    
    secs0 = GetSecs; % Citation: calculating RT by Rachel Cooper under 'Creating experiments using Matlab and Psychtoolbox' accessed November 17th 2015, can be found on: https://www.academia.edu/2614964/Creating_experiments_using_Matlab_and_Psychtoolbox
    % Wait for keypress and release, only accurate to the nearest 5ms,
    % record time until keypress and which key was pressed
    Screen('Flip', window);
    WaitSecs(time_interval);
    KbWait;
    [keyIsDown, secs, keyCode] = KbCheck;% Citation: Rachel Cooper, accessed November 17th 2015, see full citation above. Modified, deleted deltasecs
    
    
    % If Esc pressed, data for that trial will not be saved, will quit
    % back to Matlab and indicate that the quit key was pressed
    if keyCode(leftKey)
        % stores the user response associated with the image.
        response(currentStimulus) = 'L';
    elseif keyCode(rightKey)
        response(currentStimulus) = 'R';
    elseif keyCode(quitKey)
        Screen('CloseAll');
        error('User hit the quit key');
    end
    %Citation, for RT calculation as well: Rachel Cooper, accessed November 17th 2015, see full citation above
    RT = secs - secs0;
    % Assign values into growing row vector
    participant_row(4) = response;
    %count = count + 1;
    participant_row(5) = RT;
    %count = count + 1; 
end

